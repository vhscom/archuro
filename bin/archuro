#!/usr/bin/env sh

#
# Copyright (C) 2019  VHS <0xc000007b@tutanota.com>
#
# This file is part of Archuro.
#
# Archuro is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archuro is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -e

#
# Archuro - Portable Arch Linux development workflow for macOS Catalina.
#
# Archuro is a command line utility and configuration managmenet system that
# allows you to set-up and maintain a virtualized Arch Linux dev environment
# on the macOS operating system in a sane way.
#
# - Streamline machine setup and maintenance with a single command.
# - Achieve coding zen with Hyper running Arch Linux with Powerlevel10k.
# - Share dotfiles configuration between macOS and Arch Linux.
# - Designed for use with GNU Stow.
#

# COMMIT TO MEMORY
# 
# caffeinate -u -t 5400 - keeps mac awake for an hour and a half
# curl -s https://api.github.com/repos/atom/atom/releases | grep browser_download_url | grep '64[.]deb' | head -n 1 | cut -d '"' -f 4
# sudo scutil --set HostName [NewHostNameHere] (priveledged on macOS, w/o sudo pops an auth dialog with touch id support)

# DESIGN
#
# Font: [FiraCode] | Source Code Pro | Anonymous Pro | Consolas | Menlo | Meslo LG
# TTY: [Terminal] ([Bash 5] for sysadmin) | [Hyper] ([Arch Linux] + [Powerlevel10k] statusline)
# Editor: [Vim] ([Gruvbox]) | [NeoVim] | [Atom]
# Multiplexer: [tmux]
# Theme: [Verminal] (Hyper) | Atom One Dark (VS Code)
# IDE: [VS Code] | Eclipse | PhpStorm
# Package Manager: [Homebrew]
# Window Manager: [Rectangle] | [Spectacle] | [Slate] | [ShiftIt]
# Hypervisor: [xhyve] | VirtualBox
# Virtualization: [Podman] | [Docker Desktop]
# DevOps: Packer

# Mac App Store apps
#
# - VPN: WireGuard
# - Secrets: Bitwarden
# ... see stow/dot-Brewfile for more

# Other apps
# - Telegram (Messenger)
# - GitHub Desktop (plebs need some luv too)
# - Spectacle (Window Manager) (replace with Rectangle)
# - Sketch (Graphics) (maybe...)
# - Avocode (maybe...)
# ... see stow/dot-Brewfile for more

# CLI tools
#
# Generators: hugo
# Graphics: [ffmpeg], pngquant
# SysAdmin: mas, brew, stow, htop
# DevOps: packer
# Productivity: z, tldr
# ... see stow/dot-Brewfile for more

# INSPIRATION / RESOURCES
# 
# - https://openfolder.sh/macos-migrations-with-brewfile for backup and restore
# - https://github.com/lmammino/dotfiles/blob/master/.bash_profile snippets
# - https://scriptingosx.com/2019/07/install-bash-5-on-macos-with-patches/
# - https://unix.stackexchange.com/a/71258/111911 describes zsh dotfiles
# - https://loige.co/random-emoji-in-your-prompt-how-and-why/
# - https://github.com/idcrook/i-dotfiles portable solution
# - https://github.com/scop/bash-completion for Linux and macOS
# - https://github.com/paulmillr/dotfiles once upon a fork
# - https://github.com/tiiiecherle/osx_install_config
# - https://github.com/monfresh/laptop
# - https://github.com/AleksanderPopov/.dotfiles
# - https://github.com/reedia/dotfiles
# - https://gist.github.com/PashCracken/b6070359486ea651eed66a5e86567ebb p10k with k8s
# - https://thoughtbot.com/blog/my-life-with-neovim 8 months after the move from vim
# - https://github.com/AlexanderWillner/runMacOSinVirtualBox for make-based setup

# OTHER TOOLS
# 
# - https://github.com/bkuhlmann/mac_os automation scripts for macOS
# - https://github.com/bkuhlmann/mac_os-config

# TODO
# 

# - [ ] Explore use of Nix for cross-platform install of Kitty et al.
# - [ ] Consider rewrite in TypeScript with https://yargs.js.org
# - [ ] Review https://github.com/macmade/trash/issues/4 or just keep using trash
# - [ ] Add gitconfig with some aliases
# - [ ] Install Touchbar for Hyper <https://github.com/SwarShah/hyper-custom-touchbar>
# - [ ] Touchbar buttons for man (and tldr) similar to Terminal
# - [x] Bash completions
# - [ ] Docker completions
# - [ ] Zsh completions
# - [ ] Integrate [Packer] ([Example `Makefile`](https://stackoverflow.com/a/33594470/712334))
# - [ ] [Pamac] (install using [Yay]) ([instructions](https://switchedtolinux.com/installing-pamac-on-arch-with-yay/))
# - [x] Consider how to meld with [Linux Brew](https://docs.brew.sh/Homebrew-on-Linux) manifest
# - [ ] Set p10k configuration at login/prompt for Zsh (whatever that meant)
# - [ ] Create docker volume and mount
# - [ ] Run configuration after Arch is up and running
# - [ ] Script the config setup
# - [x] Automatically set Archuro as the default Terminal theme
# - [x] Install Powerlevel10k
# - [ ] Install Retro groove color scheme for Vim <https://github.com/morhetz/gruvbox>
# - [x] Install neovim ([Thoughtbot on Neovim](https://thoughtbot.com/blog/my-life-with-neovim))
# - [ ] Configure One Dark theme with <https://github.com/rakr/vim-one>
# - [x] Install [Nerd Fonts]
# - [ ] Add VS Code plugins:
#   - https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format for working with .zsh file extension used in archuro
#   - https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode
#   - https://github.com/prettier/prettier-vscode
# - [ ] Automate VS Code extension setup
# - [ ] Enable "sane defaults" for VS Code (e.g. "files.insertFinalNewline": true) https://github.com/Microsoft/vscode/issues/12076#issuecomment-340037747
# - [ ] Colorize output (some done, more needed. here's a [breadcrumb from SO](https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux))
# - [ ] Consider [XDG configuration files standard](https://specifications.freedesktop.org/basedir-spec/basedir-spec-0.8.html)
#   *Note:* ...above mentioned on [Managing dotfiles with stow](https://alexpearce.me/2016/02/managing-dotfiles-with-stow/) article
# - [ ] Automatically hide dock (there's a full config-driven lib for this)
# - [ ] Update Terminal Profile to remove zsh call (consider bash for archlinux)

# FAQ
#
# How do I install Xcode? Run `mas install 497799835` from a terminal window
# following installation. Mas is made available during Homebrew installation.
# 
# Why Bash 5? Portability and consistency with Linux. Apple decided to switch
# to Zsh during Catalina but that doesn't stop us from using Bash 5 ourselves.
# 
# Isn't one tty enough? Depends where you're using it. Hyper is intended to
# for zen coding with zsh and arch linux running in a container with an all
# black display suitable for Archuro coding. Kitty provides a cross-platform
# terminal experience.
#

# =========================================================================== #
# =================================================================== #

BINDIR=/usr/local/bin
TMPDIR="${TMPDIR:-"/var/tmp"}"
ETCDIR=/usr/local/etc
ARTDIR="$HOME/archuro/artifacts"
APPDIR="/Applications"

UARG_FORCED_INSTALL=
UARG_STOW_DOTFILES=

# =========================================================================== #
# 000 >>- BUILD ESSENTIALS
# =================================================================== #

# Install Xcode Command Line Tools (CLT) if not installed
# @requires [command] sudo
# @expects $OSTYPE == darwin*
function install_xcode_clt_macos {
    if ! xcode-select --install 2>/dev/null; then
        echo "Xcode Command Line Tools found. Skipping setup ..."
    else
        echo "Beginning setup of Xcode Command Line Tools ..."
        xcode-select --install
        # xcodebuild -license # accept Xcode and SDK agreements manually
        xcodebuild -runFirstLaunch # accept Xcode and SDK agreements automatically
        echo "Completed setup of Xcode Command Line Tools ..."
    fi
}

# Install GNU Stow for managing dotfiles if not installed
# @env $TMPDIR temporary directory
# @expects [command] pacman if [ $OSTYPE = linux-gnu ]
# @see https://alexpearce.me/2016/02/managing-dotfiles-with-stow/
# @see https://github.com/idcrook/i-dotfiles/tree/master/stow
function install_stow {
    if hash stow 2>/dev/null; then
        echo "GNU Stow found. Skipping ..."
    else
        echo "Beginning installation of Stow ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            echo "Installing from source ..."
            mkdir -p "$TMPDIR/stow" && cd "$_"
            curl -#Lo - https://ftp.gnu.org/gnu/stow/stow-latest.tar.gz | tar xz --strip-components=1
            ./configure; make; sudo make install
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S stow
        fi
        echo "Completed installation of GNU Stow ..."
    fi
}

# Stow dotfiles using GNU stow
# @requires [command] stow version 2.3.1+
# @see [command] archuro init -S
function stow_dotfiles {
    local re="version [3-9]\.[3-9]\d?\.[1-9]\d?|version \d{2}.*|version [2-9]\.([3-9]|\d{2}).[1-9]"
    if hash stow 2>/dev/null && stow -h | head -n 1 | grep -qE "$re"; then
        echo "Creating symlink farm using 'dot-' files in 'stow' directory ..."
        stow --dotfiles -S stow
        echo "Completed creation of symlinks to $HOME ..."
    else
        echo "WARNING! Cannot stow dotfiles:"
        echo "  * Install GNU Stow version 2.3.1 or higher to use this option"
    fi
}

# Install Homebrew
# @expects $OSTYPE == darwin*
# @requires [command] ruby, sudo
function install_homebrew_macos {
    if hash brew 2>/dev/null; then
        echo "Homebrew found. Skipping ..."
    else
        echo "Beginning installation of Homebrew ..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        echo "Homebrew installation completed ..."
    fi
}

# Install Mac App Store command line interface
# @expects $OSTYPE == darwin*
# @requires [command] brew
function install_store_cli_macos {
    if hash mas 2>/dev/null; then
        echo "Mac App Store CLI found. Skipping ..."
    else
        echo "Beginning installation of Mac App Store command line interface ..."
        brew install mas
        brew install mas-cli/tap/mas
        echo "Mac App Store command line interface installation completed ..."
    fi
}

# Install Docker Desktop for macOS
function install_docker_desktop_for_macos {
    if [[ -n "$(docker info --format '{{.OperatingSystem}}' | grep 'Docker Desktop')" ]]; then
        echo "Docker Desktop found. Skipping ..."
    else
        echo "WARNING! Docker Desktop not installed:"
        echo "  * Install docker desktop from <https://docs.docker.com/docker-for-mac/install/>"
    fi
}

# Install build essentials for macOS
function install_build_essentials_macos {
    install_xcode_clt_macos
    install_homebrew_macos
    install_store_cli_macos
}

# Install Go at user request
# @requires [command] pacman
function install_go_arch_maybe {
    echo "Would you like to install Go?"
    select yn in "Yes" "No"; do
        case "$yn" in
            Yes ) pacman --noconfirm -S go; break;;
            No ) break;;
        esac
    done
}

# Installs a sample Vue project for use with Node and Yarn
# @requires [command] git
function install_vue_project_maybe {
    echo "Beginning installation of sample Vue project for Node ..."
    git clone https://github.com/logaretm/vue-use-web.git ~/vue-use-web
    echo "Completed installation of sample Vue project for Node ..."
}

# Install NPM (includes Node) and Yarn at user request
# @requires [command] pacman
function install_node_arch_maybe {
    echo "Would you like to install Node?"
    select yn in "Yes" "No"; do
        case "$yn" in
            Yes ) pacman --noconfirm -S npm yarn; install_vue_project_maybe; break;;
            No ) break;;
        esac
    done
}

# Install Python at user request
# @requires [command] pacman
function install_python_arch_maybe {
    echo "Would you like to install Python?"
    select yn in "Yes" "No"; do
        case "$yn" in
            Yes ) pacman --noconfirm -S python; break;;
            No ) break;;
        esac
    done
}

# Install Rust at user request
# @requires [command] pacman
function install_rust_arch_maybe {
    echo "Would you like to install Rust?"
    select yn in "Yes" "No"; do
        case "$yn" in
            Yes ) pacman --noconfirm -S rust; break;;
            No ) break;;
        esac
    done
}

# Short series of prompts helps user choose programming languages to
# install during init on GNU/Linux. Skipped when '-S' option passed.
function choose_programming_languages {
    install_go_arch_maybe
    install_node_arch_maybe
    install_python_arch_maybe
    install_rust_arch_maybe
}

# Install build essentials
function install_build_essentials {
    install_stow
    install_terminal_emuators
    if [[ "$OSTYPE" == darwin* ]]; then
        install_build_essentials_macos
        install_docker_desktop_for_macos
    elif [[ "$OSTYPE" == linux-gnu* && "$UARG_STOW_DOTFILES" -ne 1 ]]; then
        echo "Install a programming language?"
        select yn in "Yes" "No"; do
            case "$yn" in
                Yes ) choose_programming_languages; break;;
                No ) return;;
            esac
        done
    fi
}

# =========================================================================== #
# 010 >>- SHELL ENVIRONMENT
# =================================================================== #

# Install Bash 5 and known patches if not installed
# 
# Bash is the default shell environment on most Linux distributions. Version
# 5 is not available on macOS Catalina so install and use for env portability.
# 
# @requires [command] sudo, curl, tar, make, tee, patch
# @expects [[ -f /etc/shells ]]
# @see https://www.gnu.org/software/bash/ "about"
# @see https://ftp.gnu.org/gnu/bash/bash-5.0-patches/ "patch downloads"
# @see https://www.gnu.org/software/bash/manual/ "manual"
# @see https://ftp.gnu.org/gnu/bash/ "downloads"
# @see http://ftpmirror.gnu.org/bash/ "download mirror"
# @see https://scriptingosx.com/2019/02/install-bash-5-on-macos/ "instructions"
function install_bash_5_macos {
    if bash --version | grep -qE "5.0.11\(1\)-release"; then
        "$(which bash)" --version | head -1
        "$(which zsh)" --version
    else
        echo "Beginning installation of GNU Bash, version 5 ..."
        echo "Downloading version 5.0 release ..."
        mkdir -p $TMPDIR && cd "$_"
        curl -#Lo - https://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz | tar xz
        cd bash-5.0
        echo "<<- Downloading patches 1 thru 11 ..." # XXX: remove hardcoding
        curl -#L "https://ftp.gnu.org/gnu/bash/bash-5.0-patches/bash50-[001-011]" | patch -p0
        echo "<<- Beginning configuration ..."
        ./configure -q &>1
        echo "<<- Beginning build ..."
        make -s &>1
        echo "<<- Beginning installation..."
        make install -s &>1
        echo "$BINDIR/bash" | sudo tee -a /etc/shells # XXX: do not append if shell exists
        echo "Bash 5 installation completed ..."
        /usr/local/bin/bash
        echo "<<- The  interactive shell is now bash Bash 5.0.11(1)."
        if [[ "${SHELL##/*/}" == "zsh" ]]; then
            echo "<<- To set Bash 5.0.11(1) as the default shell for $(whoami) run `chsh -u $whoami -s /usr/local/bin/bash`."
        fi
    fi

    # Read profile settings. By default macOS Catalina (v10.15) ships with Z shell
    # as the default shell so we start by checking the current shell and emulating
    # sh in the Z shell case and use a more portable, POSIX-compliant profile.
    if [[ "${SHELL##/*/}" == "zsh" ]]; then
        echo 'You might want to change your default shell to Bash 5: `chsh -s /usr/local/bin/bash`'
    fi
}

# Configure shell environemnt
function configure_shell_environment {
    [[ "$OSTYPE" == darwin* ]] && install_bash_5_macos
    continue
}

# =========================================================================== #
# 020 >>- SYSADMIN TOOLS
# =================================================================== #

# Install htop - an interactive viewer for unix
# @see https://hisham.hm/htop/
# @requires [command -y] sudo
# @requires [command -y] curl
# @requires [command -y] tar
# @uses $TMPDIR temporary directory
# @uses $BINDIR target directory
function install_htop {
    if hash htop 2>/dev/null; then
        echo "htop found. Skipping ..."
    else
        echo "Beginning installation of htop ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            mkdir -p "$TMPDIR/htop" && cd "$_"
            curl -#Lo - https://hisham.hm/htop/releases/2.2.0/htop-2.2.0.tar.gz | tar xz --strip-components=1
            ./configure; make; sudo make install # @requires [command ...] python, gcc
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S htop
        fi
        echo "Finished installation of htop ..."
    fi
}

# Install TLDR bash client if not installed
# @requires [command ...] curl, chmod, tar
# @env $TMPDIR temporary directory
# @env $BINDIR target directory
function install_tldr {
    if hash tldr 2>/dev/null; then
        echo "TLDR found. Skipping ..."
    else
        echo "Beginning installation of TLDR ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            echo "Installing v0.44 from remote tarball ..."
            mkdir -p "$TMPDIR/tldr" && cd "$_"
            curl -#Lo - https://github.com/pepa65/tldr-bash-client/archive/v0.44.tar.gz | tar xz --strip-components=1
            chmod +x tldr && mv tldr "$BINDIR/tldr"
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S tldr
        fi 
        echo "Completed installation of TLDR at v0.44 ..."
    fi
}

# Install Lynx text mode web browser
function install_lynx {
    if hash lynx 2>/dev/null; then
        echo "Lynx found. Skipping ..."
    else
        echo "Beginning installation of Lynx ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            echo "Installing from source ..."
            mkdir -p "$TMPDIR/lynx" && cd "$_"
            curl -#Lo - https://invisible-mirror.net/archives/lynx/tarballs/lynx2.8.9rel.1.tar.gz | tar xz --strip-components=1
            ./configure && make
            make install && make install-help
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S lynx
        fi 
        echo "Completed installation of Lynx at v2.8.9 (2018-07-08) ..."
    fi
}

# Install tmux for terminal multiplexing
# @uses [command ...] sudo, curl, make, grep - source builds
# @uses [command] pacman - archlinux
function install_tmux {
    if hash tmux 2>/dev/null; then
        echo "tmux found. Skipping ..."
    else
        echo "Beginning installation of tmux ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            echo "Installing from source ..."
            mkdir -p "$TMPDIR/tmux" && cd "$_"
            url=curl -s https://api.github.com/repos/tmux/tmux/releases/latest | grep browser_download_url | grep 'tar[.]gz' | cut -d '"' -f 4
            curl -#Lo - "$url" | tar xz --strip-components=1
            ./configure; make; sudo make install
            make install
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S tmux
        fi 
        echo "Completed installation of tmux ..."
    fi
}

# Install system administration tools
function install_sysadmin_tools {
    install_htop
    install_tldr
    install_lynx
    install_tmux
}

# =========================================================================== #
# 030 >>- DEVELOPER TOOLS
# =================================================================== #

# Install Powerlevel10k for Zsh
# @expects [command] stow --dotfiles -S stow
# @requires [command] git
function install_powerlevel10k {
    if [ -d "$ETCDIR/powerlevel10k" ]; then
        echo "Using powerlevel10k"
    else
        echo "Beginning installation of Powerlevel10k ..."
        git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$ETCDIR/powerlevel10k"
        # XXX: Write below conditionally based on precence in existing dotfiles
        echo "source $ETCDIR/powerlevel10k/powerlevel10k.zsh-theme" >>- ~/.zshrc
        echo "Completed installation of Powerlevel10k ..."
    fi
}

# Install Profile for macOS Terminal
# @expects $OSTYPE == darwin*
function install_terminal_profile_macos {
    allthemes=$(defaults read com.apple.Terminal 'Window Settings')
    # terminal_theme=$(defaults read com.apple.Terminal 'Default Window Settings')
    if [[ "$allthemes" == *"Archuro"* ]]; then
        echo "Using Archuro.terminal"; return
    else
        echo "Beginning installation of Terminal profile ..."d
        open "$ARTDIR/Archuro.terminal" # opens a terminal window
        defaults write com.apple.Terminal 'Default Window Settings' -string 'Archuro'
        defaults write com.apple.Terminal 'Startup Window Settings' -string 'Archuro'
        osascript -e 'tell application "Terminal" to close first window' # closes terminal window
        echo "Completed installation of Terminal profile ..."
        echo "Changes will take effect after all Terminal windows are closed."
    fi
}

# Install development tools
function install_development_tools {
    if [[ "$OSTYPE" == darwin* ]]; then
        install_terminal_profile_macos
    fi
    install_powerlevel10k
}

# Install Docker Desktop and Terminal Completions
#
# @requires A 64-bit Intel CPU
# @requires macOS High Sierra (10.13) (or higher)
# @requires Command Line Tools (CLT) for Xcode: xcode-select --install, developer.apple.com/downloads or Xcode
# @requires A Bourne-compatible shell for installation (e.g. bash or zsh)
# @todo Improve speed

# =========================================================================== #
# 040 >>- SECURITY TOOLS
# =================================================================== #

# Install WireGuard for macOS
# @expects $OSTYPE == darwin*
# @requires mas
function install_wireguard_macos {
    if [ -z "$(mas info 1451685025)" ]; then
        echo "Beginning installation of WireGuard for macOS ..."
        mas install 1451685025 # Installs directly from Mac App Store
        echo "Completed installation of WireGuard for macOS ..."
    else
        echo "WireGuard found. Skipping ..."
    fi
}

# Install Bitwarden for macOS
# @expects $OSTYPE == darwin*
# @requires mas
function install_bitwarden_macos {
    if [ -z "$(mas info 1352778147)" ]; then
        echo "Beginning installation of Bitwarden for macOS ..."
        mas install 1352778147 # Installs directly from Mac App Store
        echo "Completed installation of Bitwarden for macOS ..."
    else
        echo "Bitwarden found. Skipping ..."
    fi
}

# Install security tools for macOS
# @expects $OSTYPE == darwin*
# @requires mas
function install_security_tools_macos {
    install_bitwarden_macos
    install_wireguard_macos
}

# Install security tools
function install_security_tools {
    [[ "$OSTYPE" == darwin* ]] && install_security_tools_macos
    continue
}

# =========================================================================== #
# 050 >>- PRODUCTIVITY TOOLS
# =================================================================== #

# Install Z for quickly changing directories
# @requires chmod, curl, tar
function install_z {
    if test -f "$BINDIR/z.sh"; then
        echo "Z found. Skipping ..."
    else
        echo "Beginning installation of Z ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            echo "Installing from source ..."
            mkdir -p "$TMPDIR/z" && cd "$_"
            curl -#Lo - https://github.com/rupa/z/archive/v1.9.tar.gz | tar xz --strip-components=1
            chmod +x z.sh
            mv z.sh "$BINDIR" # must be sourced subsequently
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S awk z
        fi 
        echo "Completed installation of Z ..."
    fi
}

# Install FFmpeg from latest snapshot <https://evermeet.cx/ffmpeg/>
# @requires chmod, curl, tar
function install_ffmpeg {
    if hash ffmpeg 2>/dev/null; then
        echo "FFmpeg found. Skipping ..."
    else
        echo "Beginning installation of FFmpeg ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            mkdir -p "$TMPDIR" && cd "$_"
            curl -#Lo - https://evermeet.cx/pub/ffmpeg/snapshots/ffmpeg-95291-g5345965b3f.zip | tar xz
            chmod +x ffmpeg
            mv ffmpeg "$BINDIR"
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S ffmpeg
        fi 
        echo "Completed installation of FFmpeg at 2019-10-09 snapshot ..."
    fi
}

# Install pngquant from gzipped release tarball in git repository
install_pngquant () {
    if hash pngquant 2>/dev/null; then
        echo "PNGQuant found. Skipping ..."
    else
        echo "Beginning installation of PNGQuant ..."
        if [[ "$OSTYPE" == darwin* ]]; then
            echo "Installing from source ..."
            mkdir -p "$TMPDIR/pngquant" && cd "$_"
            curl -#Lo - https://github.com/kornelski/pngquant/archive/2.12.5.tar.gz | tar xz --strip-components=1
            chmod +x pngquant
            mv pngquant "$BINDIR"
        elif [[ "$OSTYPE" == linux-gnu* ]]; then
            hash pacman 2>/dev/null && pacman --noconfirm -S pngquant
        fi 
        echo "Completed installation of PNGQuant at v2.12.5 ..."
    fi
}

# Install productivity tools
function install_productivity_tools {
    install_z
    install_ffmpeg
    install_pngquant
}

# =========================================================================== #
# 060 >>- CUSTOM DEPENDENCES
# =================================================================== #

# Install Homebrew dependencies
# @expects $OSTYPE == darwin*
# @requires [command] brew, mas
function install_custom_tools_macos {
    echo "Beginning installation of custom Homebrew dependencies ..."
    if [ -f "$HOME/.Brewfile" ]; then
        HOMEBREW_NO_AUTO_UPDATE=1 brew bundle --no-upgrade --global
    else
        echo "Global Brewfile not found. Skipping ..."
    fi
    echo "Completed installation of custom Homebrew dependencies ..."
}

# Upgrade Homebrew dependencies
# @expects $OSTYPE == darwin*
# @requires [command] brew, mas
function update_custom_tools_macos {
    echo "Beginning update of custom Homebrew dependencies ..."
    if [ -f "$HOME/.Brewfile" ]; then
        brew bundle --global
    else
        echo "Global Brewfile not found. Skipping update ..."
    fi
    echo "Completed update of custom Homebrew dependencies ..."
}

# Install custom dependencies
function install_custom_tools {
    [[ "$OSTYPE" == darwin* ]] && install_custom_tools_macos
    continue
}

# Update custon dependencies
function update_custom_tools {
    [[ "$OSTYPE" == darwin* ]] && update_custom_tools_macos
    continue
}

# =========================================================================== #
# HE DOVE INTO THE ICY WATER
# =================================================================== #

# color chart <https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg>

grey=`tput setaf 239`
red=`tput setaf 1`
green=`tput setaf 2`
magenta=`tput setaf 5`
reset=`tput sgr0`
bold=`tput bold`

function print_help_message {
    echo "archuro (Archuro) version 0.1.0"
    echo
    echo "SYNOPSIS"
    echo
    echo "    ${magenta}archuro${reset} ${grey}[COMMAND] [OPTION ...]${reset}"
    echo
    echo "COMMANDS"
    echo
    echo "    ${green}attach${reset}       ${grey}Attach to a running archlinux tty${reset}"
    echo "    ${green}init${reset}         ${grey}Initialise build system${reset}                 ${green}-S, --stow${reset}     ${grey}Stow dotfiles${reset}"
    echo "    ${green}install${reset}      ${grey}Install dependencies${reset}                    ${green}-f, --force${reset}    ${grey}Ingore conflicts${reset}"
    echo "    ${green}ls${reset}           ${grey}List available archlinux images${reset}"
    echo "    ${green}ps${reset}           ${grey}Show archlinux containers${reset}               ${green}-q, --quiet${reset}    ${grey}Only display numeric IDs${reset}"
    echo "    ${green}run${reset}          ${grey}Run last saved archlinux image"${reset}
    echo "    ${green}save${reset}         ${grey}Build Dockerfile and tag latest${reset}"
    echo "    ${green}stop${reset}         ${grey}Stop all running archlinux containers${reset}"
    echo "    ${green}tty${reset}          ${grey}Start interactive archlinux tty${reset}"
    echo "    ${green}update${reset}       ${grey}Update optional packages${reset}"
    echo
    echo "OPTIONS"
    echo
    echo "    ${green}-h, --help${reset}   ${grey}Show this help message${reset}"
    echo
    echo "Report bugs to: <https:/codeberg.org/vhs/archuro>"
    echo "Archuro is free software licensed under the ${bold}GNU GPLv3+${reset}."
}

# Run program
if [ $# -eq 0 ]; then
    print_help_message
    exit 0
else
    case "$1" in
    "attach" | "a")
        attachid="$(archuro ps -q | head -1)"
        if [[ -z "$attachid" ]]; then
            echo "Cannot attach to a container. No running containers found."
            echo "Do you wish to start a new archuro tty now?"
            select yn in "Yes" "No"; do
                case "$yn" in
                    Yes ) archuro tty; break;;
                    No ) exit;;
                esac
            done
        else
            echo "Running container ${attachid} found. Attaching ..."
            sleep 3
            docker attach "$attachid"
        fi
        ;;
    "init")
        test "$2" = "-S" || test "$2" = "--stow" && UARG_STOW_DOTFILES=1
        echo "${green}000 ${magenta}>>- ${green}BUILD ESSENTIALS ...${reset}"
        install_build_essentials
        [[ $UARG_STOW_DOTFILES -eq 1 ]] && \
            echo "${green}000 ${magenta}>>- ${green}STOW DOTFILES ...${reset}" && \
            stow_dotfiles
        ;;
    "update" | "up" | "install" | "ins" | "i")
        test "$2" = "-f" || test "$2" = "--force" && UARG_FORCED_INSTALL=1
        [[ $UARG_FORCED_INSTALL -eq 1 ]] && echo "${red}Katarina! Katarina! ...${reset}"
        echo "${green}010 ${magenta}>>- ${green}SHELL ENVIRONMENT${reset}"
        configure_shell_environment
        echo "${green}020 ${magenta}>>- ${green}SYSADMIN TOOLS${reset}"
        install_sysadmin_tools
        echo "${green}030 ${magenta}>>- ${green}DEVELOPMENT TOOLS${reset}"
        install_development_tools
        echo "${green}040 ${magenta}>>- ${green}SECURITY TOOLS${reset}"
        install_security_tools
        echo "${green}050 ${magenta}>>- ${green}PRODUCTIVITY TOOLS${reset}"
        install_productivity_tools
        echo "${green}060 ${magenta}>>- ${green}CUSTOM DEPENDENCIES${reset}"
        install_custom_tools
        [[ $UARG_FORCED_INSTALL -eq 1 ]] && echo "${magenta}Archuro!${reset}"
        echo "Installation finshed. Review output for potential issues."
        echo "Run command again  with '-S' flag to 'stow --dotfiles stow' with GNU Stow."
        if [[ "$OSTYPE" == darwin* ]]; then
            echo "Manage Homebrew dependencies from ~/.Brewfile once stowed."
        fi
        ;;
    "tty" | "t")
        docker run -e LANG=en_US.utf8 -e TERM -it --rm archlinux/base bash -uexc '
  pacman -Sy --noconfirm zsh git
  git clone https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
  echo "source ~/powerlevel10k/powerlevel10k.zsh-theme" >>~/.zshrc
  cd ~/powerlevel10k
  exec zsh'
        docker tag "$(docker images -q | head -1)" archuro
        ;;
    "ls")
        echo "REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE"
        docker images | grep archlinux # XXX: --filter based on image tag 'archuro'
        ;;
    "run")
        echo "Running extended image and connecting to tty ..."
        echo "Port 8080 is exposed and ~/archuro/stow bind mounted ..."
        docker run -it -p 8080:8080 -v ~/archuro/stow:/root/archuro/stow archlinux/extended:latest bash
        echo "Run 'archuro ps' to view running archlinux containers. Run 'attach' to attach to tty."
        ;;
    "save" | "s")
        echo "Building and tagging Dockerfile image ..."
        docker build . && docker tag $(docker image ls -q | head -1) archlinux/extended:latest
        echo "Dockerfile $(docker image ls -q | head -1) built and tagged. Run 'archuro ls' to view it."
        ;;
    "ps")
        case "$2" in
        "-q" | "--quiet")
            archuro ps | cut -c 1-12 | sed -n '1!p'
            ;;
        *)
            echo "CONTAINER ID        IMAGE               COMMAND                   CREATED             STATUS              PORTS"
            docker container ls | grep archlinux # XXX: --filter based on image tag 'archuro'
            ;;
        esac
        ;;
    "-h" | "--help")
        print_help_message
        ;;
    *)
        print_help_message
        ;;
    esac
    exit 0
fi

# =========================================================================== #
# AND THEY BOTH DROWNED
# =================================================================== #


# <<- MARKDOWN
#
# [Arch Linux]: https://www.archlinux.org "A simple, lightweight distribution."
# [Bash 5]: https://www.gnu.org/software/bash/ "Bash is the Bourne Again SHell."
# [Docker Desktop for Mac]: https://docs.docker.com/docker-for-mac/ "Docker is a full development platform for creating containerized applications. Docker Desktop is the best way to get started with Docker on Mac."
# [ffmpeg]: https://ffmpeg.org/ "A command line-only program that allows you to convert videos and audio into different formats, as well as record live audio and video."
# [FiraCode]: https://github.com/tonsky/FiraCode "Monospaced font with programming ligatures."
# [GitHub Desktop]: https://github.com/desktop/desktop "Simple collaboration from your desktop."
# [GNU Stow]: https://www.gnu.org/software/stow/ "GNU Stow is a symlink farm manager."
# [Homebrew]: https://github.com/Homebrew/brew "The missing package manager for macOS."
# [Hyper]: https://github.com/zeit/hyper "Terminal built on web technologies."
# [Podman]: https://github.com/containers/libpod "A library used to create container pods."
# [Powerlevel10k]: https://github.com/romkatv/powerlevel10k "A fast reimplementation of Powerlevel9k ZSH theme."
# [Terminal]: https://support.apple.com/guide/terminal/welcome/mac "Terminal on Mac."
# [tmux]: https://github.com/tmux/tmux "Terminal multiplexer."
# [Toybox]: https://github.com/landley/toybox "An all-in-one Linux command line."
# [gruvbox]: https://github.com/morhetz/gruvbox "Retro groove color scheme for Vim."
# [NeoVim]: https://github.com/neovim/neovim "Vim-fork focused on extensibility and usability."
# [Nerd Fonts]: https://github.com/ryanoasis/nerd-fonts "Iconic font aggregator, collection, and patcher."
# [Packer]: https://www.packer.io "Build Automated Machine Images"
# [Pamac]: https://gitlab.manjaro.org/applications/pamac "Graphical Package Manager for Manjaro Linux (based on libalpm)."
# [Rectangle]: https://github.com/rxhanson/Rectangle
# [Ranger]: https://github.com/ranger/ranger "A VIM-inspired filemanager for the console."
# [Spectacle]: https://github.com/eczarny/spectacle "Spectacle allows you to organize your windows without using a mouse."
# [Slate]: https://github.com/jigish/slate "A window management application."
# [ShiftIt]: https://github.com/fikovnik/ShiftIt "Managing windows size and position in macOS with Hammerscript and Lua."
# [tldr]: https://tldr.sh "Simplified and community-driven man pages"
# [Vim]: https://github.com/vim/vim "A highly configurable text editor"
# [VS Code]: https://code.visualstudio.com/ "A code editor redefined and optimized for building and debugging modern web and cloud applications."
# [Verminal]: https://github.com/defringe/verminal "A Hyper theme with beautiful translucency on macOS."
# [xhyve]: https://github.com/machyve/xhyve "A lightweight OS X virtualization solution."
# [Yay]: https://github.com/Jguer/yay "Yet another Yogurt - An AUR Helper written in Go."
# 
# EOF
